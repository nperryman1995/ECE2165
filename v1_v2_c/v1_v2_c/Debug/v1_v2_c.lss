
v1_v2_c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000038c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800100  00800100  00000400  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000430  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000920  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000714  00000000  00000000  00000dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000442  00000000  00000000  000014ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  00001930  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000426  00000000  00000000  000019c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000046d  00000000  00000000  00001dee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  0000225b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ac 30       	cpi	r26, 0x0C	; 12
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 5d 01 	call	0x2ba	; 0x2ba <main>
  88:	0c 94 c4 01 	jmp	0x388	; 0x388 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <collect_inputs>:
	0b01100100 = ADC4
	0b01100101 = ADC5
	*/
	
	//Sensor One
	ADMUX = 0b01100000;
  90:	80 e6       	ldi	r24, 0x60	; 96
  92:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA |= (1<<ADSC); //start conversion
  96:	ea e7       	ldi	r30, 0x7A	; 122
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	80 64       	ori	r24, 0x40	; 64
  9e:	80 83       	st	Z, r24
	while ((ADCSRA & (1<<ADIF)) == 0); //wait for conversion to finish
  a0:	80 81       	ld	r24, Z
  a2:	84 ff       	sbrs	r24, 4
  a4:	fd cf       	rjmp	.-6      	; 0xa0 <collect_inputs+0x10>
	sensorvalue1 = ADCH; //keep high byte of 10-bit result and thwo away lowest two bits
  a6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  aa:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <sensorvalue1>
			
	//Sensor Two
	ADMUX = 0b01100001;
  ae:	81 e6       	ldi	r24, 0x61	; 97
  b0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA |= (1<<ADSC);
  b4:	ea e7       	ldi	r30, 0x7A	; 122
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	80 64       	ori	r24, 0x40	; 64
  bc:	80 83       	st	Z, r24
	while ((ADCSRA & (1<<ADIF)) == 0);
  be:	80 81       	ld	r24, Z
  c0:	84 ff       	sbrs	r24, 4
  c2:	fd cf       	rjmp	.-6      	; 0xbe <collect_inputs+0x2e>
	sensorvalue2 = ADCH;
  c4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  c8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <sensorvalue2>
			
	//Sensor Three
	ADMUX = 0b01100010;
  cc:	82 e6       	ldi	r24, 0x62	; 98
  ce:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA |= (1<<ADSC);
  d2:	ea e7       	ldi	r30, 0x7A	; 122
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	80 64       	ori	r24, 0x40	; 64
  da:	80 83       	st	Z, r24
	while ((ADCSRA & (1<<ADIF)) == 0);
  dc:	80 81       	ld	r24, Z
  de:	84 ff       	sbrs	r24, 4
  e0:	fd cf       	rjmp	.-6      	; 0xdc <collect_inputs+0x4c>
	sensorvalue3 = ADCH;
  e2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  e6:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <sensorvalue3>
			
	//Sensor Four
	ADMUX = 0b01100011;
  ea:	83 e6       	ldi	r24, 0x63	; 99
  ec:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA |= (1<<ADSC);
  f0:	ea e7       	ldi	r30, 0x7A	; 122
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	80 64       	ori	r24, 0x40	; 64
  f8:	80 83       	st	Z, r24
	while ((ADCSRA & (1<<ADIF)) == 0);
  fa:	80 81       	ld	r24, Z
  fc:	84 ff       	sbrs	r24, 4
  fe:	fd cf       	rjmp	.-6      	; 0xfa <collect_inputs+0x6a>
	sensorvalue4 = ADCH;
 100:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 104:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sensorvalue4>
			
	//Sensor Five
	ADMUX = 0b01100100;
 108:	84 e6       	ldi	r24, 0x64	; 100
 10a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA |= (1<<ADSC);
 10e:	ea e7       	ldi	r30, 0x7A	; 122
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	80 64       	ori	r24, 0x40	; 64
 116:	80 83       	st	Z, r24
	while ((ADCSRA & (1<<ADIF)) == 0);
 118:	80 81       	ld	r24, Z
 11a:	84 ff       	sbrs	r24, 4
 11c:	fd cf       	rjmp	.-6      	; 0x118 <collect_inputs+0x88>
	sensorvalue5 = ADCH;
 11e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 122:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <sensorvalue5>
			
	//Sensor Six
	ADMUX = 0b01100101;
 126:	85 e6       	ldi	r24, 0x65	; 101
 128:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA |= (1<<ADSC);
 12c:	ea e7       	ldi	r30, 0x7A	; 122
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	80 64       	ori	r24, 0x40	; 64
 134:	80 83       	st	Z, r24
	while ((ADCSRA & (1<<ADIF)) == 0);
 136:	80 81       	ld	r24, Z
 138:	84 ff       	sbrs	r24, 4
 13a:	fd cf       	rjmp	.-6      	; 0x136 <collect_inputs+0xa6>
	sensorvalue6 = ADCH;
 13c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 140:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <sensorvalue6>
 144:	08 95       	ret

00000146 <delay_T_msec_timer0>:
} // end wait() 

//delays 1 ms
void delay_T_msec_timer0() {

	TCCR1A = 0x00; // clears WGM00 and WGM01 (bits 0 and 1) to ensure Timer/Counter is in normal mode.
 146:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCNT1 = 0;  // preload load TIMER0 with 0 
 14a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 14e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TCCR1B = 1<<CS11 | 1<<CS10;
 152:	83 e0       	ldi	r24, 0x03	; 3
 154:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	//while ((TIFR0 & (0x1<<TOV0)) == 0); // wait for TOV0 to roll over at 255
	while (TCNT1 < 0xfa); // exits when count = 250
 158:	e4 e8       	ldi	r30, 0x84	; 132
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	91 81       	ldd	r25, Z+1	; 0x01
 160:	8a 3f       	cpi	r24, 0xFA	; 250
 162:	91 05       	cpc	r25, r1
 164:	d8 f3       	brcs	.-10     	; 0x15c <delay_T_msec_timer0+0x16>
	TCCR1B = 0x00; // Stop TIMER0
 166:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TIFR1 = 0x1<<TOV1;  // Clear TOV0 
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	86 bb       	out	0x16, r24	; 22
 16e:	08 95       	ret

00000170 <wait>:
	sensorvalue6 = ADCH;
	
}

//calls delay_T_msec_timer0() to delay a specific number of ms
void wait(volatile int multiple) { 
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	00 d0       	rcall	.+0      	; 0x176 <wait+0x6>
 176:	cd b7       	in	r28, 0x3d	; 61
 178:	de b7       	in	r29, 0x3e	; 62
 17a:	9a 83       	std	Y+2, r25	; 0x02
 17c:	89 83       	std	Y+1, r24	; 0x01
	
	while (multiple > 0) { 
 17e:	89 81       	ldd	r24, Y+1	; 0x01
 180:	9a 81       	ldd	r25, Y+2	; 0x02
 182:	18 16       	cp	r1, r24
 184:	19 06       	cpc	r1, r25
 186:	64 f4       	brge	.+24     	; 0x1a0 <wait+0x30>
		delay_T_msec_timer0();  
 188:	0e 94 a3 00 	call	0x146	; 0x146 <delay_T_msec_timer0>
		multiple--; 
 18c:	89 81       	ldd	r24, Y+1	; 0x01
 18e:	9a 81       	ldd	r25, Y+2	; 0x02
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	9a 83       	std	Y+2, r25	; 0x02
 194:	89 83       	std	Y+1, r24	; 0x01
}

//calls delay_T_msec_timer0() to delay a specific number of ms
void wait(volatile int multiple) { 
	
	while (multiple > 0) { 
 196:	89 81       	ldd	r24, Y+1	; 0x01
 198:	9a 81       	ldd	r25, Y+2	; 0x02
 19a:	18 16       	cp	r1, r24
 19c:	19 06       	cpc	r1, r25
 19e:	a4 f3       	brlt	.-24     	; 0x188 <wait+0x18>
		delay_T_msec_timer0();  
		multiple--; 
	} //end while

} // end wait() 
 1a0:	0f 90       	pop	r0
 1a2:	0f 90       	pop	r0
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <voter>:
	TIFR1 = 0x1<<TOV1;  // Clear TOV0 

} // end delay_T_msec_timer0()

//vote between three inputs for analog inputs
int voter(int s1, int s2, int s3, int delta) {
 1aa:	0f 93       	push	r16
 1ac:	1f 93       	push	r17
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
	
	int diff1 = abs(s1 - s2);
	int diff2 = abs(s1 - s3);
 1b2:	dc 01       	movw	r26, r24
 1b4:	a4 1b       	sub	r26, r20
 1b6:	b5 0b       	sbc	r27, r21
 1b8:	fd 01       	movw	r30, r26
 1ba:	22 f4       	brpl	.+8      	; 0x1c4 <voter+0x1a>
 1bc:	ee 27       	eor	r30, r30
 1be:	ff 27       	eor	r31, r31
 1c0:	ea 1b       	sub	r30, r26
 1c2:	fb 0b       	sbc	r31, r27
	int diff3 = abs(s2 - s3);
 1c4:	eb 01       	movw	r28, r22
 1c6:	c4 1b       	sub	r28, r20
 1c8:	d5 0b       	sbc	r29, r21
 1ca:	de 01       	movw	r26, r28
 1cc:	22 f4       	brpl	.+8      	; 0x1d6 <voter+0x2c>
 1ce:	aa 27       	eor	r26, r26
 1d0:	bb 27       	eor	r27, r27
 1d2:	ac 1b       	sub	r26, r28
 1d4:	bd 0b       	sbc	r27, r29
	int output = 0;
	
	if((diff1 <= delta) && (diff2 > delta) && (diff3 > delta)) {	
 1d6:	8c 01       	movw	r16, r24
 1d8:	06 1b       	sub	r16, r22
 1da:	17 0b       	sbc	r17, r23
 1dc:	e8 01       	movw	r28, r16
 1de:	dd 23       	and	r29, r29
 1e0:	24 f4       	brge	.+8      	; 0x1ea <voter+0x40>
 1e2:	cc 27       	eor	r28, r28
 1e4:	dd 27       	eor	r29, r29
 1e6:	c0 1b       	sub	r28, r16
 1e8:	d1 0b       	sbc	r29, r17
 1ea:	2c 17       	cp	r18, r28
 1ec:	3d 07       	cpc	r19, r29
 1ee:	7c f0       	brlt	.+30     	; 0x20e <voter+0x64>
 1f0:	2e 17       	cp	r18, r30
 1f2:	3f 07       	cpc	r19, r31
 1f4:	44 f5       	brge	.+80     	; 0x246 <voter+0x9c>
 1f6:	2a 17       	cp	r18, r26
 1f8:	3b 07       	cpc	r19, r27
 1fa:	bc f5       	brge	.+110    	; 0x26a <voter+0xc0>
		output = (s1+s2)/2;	
 1fc:	68 0f       	add	r22, r24
 1fe:	79 1f       	adc	r23, r25
 200:	77 23       	and	r23, r23
 202:	14 f4       	brge	.+4      	; 0x208 <voter+0x5e>
 204:	6f 5f       	subi	r22, 0xFF	; 255
 206:	7f 4f       	sbci	r23, 0xFF	; 255
 208:	75 95       	asr	r23
 20a:	67 95       	ror	r22
 20c:	2e c0       	rjmp	.+92     	; 0x26a <voter+0xc0>
	}else if((diff1 > delta) && (diff2 <= delta) && (diff3 > delta)) {
 20e:	2e 17       	cp	r18, r30
 210:	3f 07       	cpc	r19, r31
 212:	6c f0       	brlt	.+26     	; 0x22e <voter+0x84>
 214:	2a 17       	cp	r18, r26
 216:	3b 07       	cpc	r19, r27
 218:	14 f5       	brge	.+68     	; 0x25e <voter+0xb4>
		output = (s1+s3)/2;
 21a:	bc 01       	movw	r22, r24
 21c:	64 0f       	add	r22, r20
 21e:	75 1f       	adc	r23, r21
 220:	77 23       	and	r23, r23
 222:	14 f4       	brge	.+4      	; 0x228 <voter+0x7e>
 224:	6f 5f       	subi	r22, 0xFF	; 255
 226:	7f 4f       	sbci	r23, 0xFF	; 255
 228:	75 95       	asr	r23
 22a:	67 95       	ror	r22
 22c:	1e c0       	rjmp	.+60     	; 0x26a <voter+0xc0>
	}else if((diff1 > delta) && (diff2 > delta) && (diff3 <= delta)) {
 22e:	2a 17       	cp	r18, r26
 230:	3b 07       	cpc	r19, r27
 232:	bc f0       	brlt	.+46     	; 0x262 <voter+0xb8>
		output = (s2+s3)/2;
 234:	64 0f       	add	r22, r20
 236:	75 1f       	adc	r23, r21
 238:	77 23       	and	r23, r23
 23a:	14 f4       	brge	.+4      	; 0x240 <voter+0x96>
 23c:	6f 5f       	subi	r22, 0xFF	; 255
 23e:	7f 4f       	sbci	r23, 0xFF	; 255
 240:	75 95       	asr	r23
 242:	67 95       	ror	r22
 244:	12 c0       	rjmp	.+36     	; 0x26a <voter+0xc0>
	}else if((diff1 <= delta) && (diff2 > delta) && (diff3 <= delta)) {
		output = s2;
	}else if((diff1 <= delta) && (diff2 <= delta) && (diff3 > delta)) {
 246:	2a 17       	cp	r18, r26
 248:	3b 07       	cpc	r19, r27
 24a:	74 f0       	brlt	.+28     	; 0x268 <voter+0xbe>
		output = s1;
	}else if((diff1 > delta) && (diff2 <= delta) && (diff3 <= delta)) {
		output = s3;
	}else if((diff1 <= delta) && (diff2 <= delta) && (diff3 <= delta)) {
		output = (s1+s2+s3)/3;		
 24c:	86 0f       	add	r24, r22
 24e:	97 1f       	adc	r25, r23
 250:	84 0f       	add	r24, r20
 252:	95 1f       	adc	r25, r21
 254:	63 e0       	ldi	r22, 0x03	; 3
 256:	70 e0       	ldi	r23, 0x00	; 0
 258:	0e 94 9c 01 	call	0x338	; 0x338 <__divmodhi4>
 25c:	06 c0       	rjmp	.+12     	; 0x26a <voter+0xc0>
	}else if((diff1 <= delta) && (diff2 > delta) && (diff3 <= delta)) {
		output = s2;
	}else if((diff1 <= delta) && (diff2 <= delta) && (diff3 > delta)) {
		output = s1;
	}else if((diff1 > delta) && (diff2 <= delta) && (diff3 <= delta)) {
		output = s3;
 25e:	ba 01       	movw	r22, r20
 260:	04 c0       	rjmp	.+8      	; 0x26a <voter+0xc0>
	}else if((diff1 <= delta) && (diff2 <= delta) && (diff3 <= delta)) {
		output = (s1+s2+s3)/3;		
	}else {
		output = -1;
 262:	6f ef       	ldi	r22, 0xFF	; 255
 264:	7f ef       	ldi	r23, 0xFF	; 255
 266:	01 c0       	rjmp	.+2      	; 0x26a <voter+0xc0>
	}else if((diff1 > delta) && (diff2 > delta) && (diff3 <= delta)) {
		output = (s2+s3)/2;
	}else if((diff1 <= delta) && (diff2 > delta) && (diff3 <= delta)) {
		output = s2;
	}else if((diff1 <= delta) && (diff2 <= delta) && (diff3 > delta)) {
		output = s1;
 268:	bc 01       	movw	r22, r24
		output = -1;
	}
	
	return output;
	
}
 26a:	cb 01       	movw	r24, r22
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	1f 91       	pop	r17
 272:	0f 91       	pop	r16
 274:	08 95       	ret

00000276 <comparator>:
//compare between two values
int comparator(int v1, int v2, int min, int max) {
	
	int output = 0;
	
	if((v1 >= min && v1 <= max) && (v2 >= min && v2 <= max)) {
 276:	84 17       	cp	r24, r20
 278:	95 07       	cpc	r25, r21
 27a:	8c f0       	brlt	.+34     	; 0x29e <comparator+0x28>
 27c:	28 17       	cp	r18, r24
 27e:	39 07       	cpc	r19, r25
 280:	74 f0       	brlt	.+28     	; 0x29e <comparator+0x28>
 282:	64 17       	cp	r22, r20
 284:	75 07       	cpc	r23, r21
 286:	c4 f0       	brlt	.+48     	; 0x2b8 <comparator+0x42>
 288:	26 17       	cp	r18, r22
 28a:	37 07       	cpc	r19, r23
 28c:	ac f0       	brlt	.+42     	; 0x2b8 <comparator+0x42>
		output = (v1+v2)/2;
 28e:	86 0f       	add	r24, r22
 290:	97 1f       	adc	r25, r23
 292:	99 23       	and	r25, r25
 294:	0c f4       	brge	.+2      	; 0x298 <comparator+0x22>
 296:	01 96       	adiw	r24, 0x01	; 1
 298:	95 95       	asr	r25
 29a:	87 95       	ror	r24
 29c:	08 95       	ret
	}else if ((v1 >= min && v1 <= max) && (v2 < min || v2 > max)) {
		output = v1;
	}else if ((v1 < min || v1 > max) && (v2 >= min && v2 <= max)) {
 29e:	64 17       	cp	r22, r20
 2a0:	75 07       	cpc	r23, r21
 2a2:	2c f0       	brlt	.+10     	; 0x2ae <comparator+0x38>
 2a4:	26 17       	cp	r18, r22
 2a6:	37 07       	cpc	r19, r23
 2a8:	2c f0       	brlt	.+10     	; 0x2b4 <comparator+0x3e>
		output = v2;
 2aa:	cb 01       	movw	r24, r22
 2ac:	08 95       	ret
	}else {
		output = 0;
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	08 95       	ret
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	return output;
	
}
 2b8:	08 95       	ret

000002ba <main>:
int comparator(int v1, int v2, int min, int max);

int main(void)
{
	
	DDRD = 0xff; //define all Port D bits as output
 2ba:	8f ef       	ldi	r24, 0xFF	; 255
 2bc:	8a b9       	out	0x0a, r24	; 10
    DDRC = 0x00; //define all Port C bits as input
 2be:	17 b8       	out	0x07, r1	; 7
	PRR = 0x00; //clear power reduction ADC bit (0) in PRR register
 2c0:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	ADCSRA = 1<<ADEN | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0; //enable ADC
 2c4:	87 e8       	ldi	r24, 0x87	; 135
 2c6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	
    while (1) 
    {
		
		collect_inputs();
 2ca:	0e 94 48 00 	call	0x90	; 0x90 <collect_inputs>
		v1 = voter(sensorvalue1, sensorvalue2, sensorvalue3, 4);
 2ce:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <sensorvalue3>
 2d2:	50 e0       	ldi	r21, 0x00	; 0
 2d4:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <sensorvalue2>
 2d8:	70 e0       	ldi	r23, 0x00	; 0
 2da:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <sensorvalue1>
 2de:	24 e0       	ldi	r18, 0x04	; 4
 2e0:	30 e0       	ldi	r19, 0x00	; 0
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	0e 94 d5 00 	call	0x1aa	; 0x1aa <voter>
 2e8:	ec 01       	movw	r28, r24
 2ea:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <v1+0x1>
 2ee:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <v1>
		v2 = voter(sensorvalue4, sensorvalue5, sensorvalue6, 3);
 2f2:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <sensorvalue6>
 2f6:	50 e0       	ldi	r21, 0x00	; 0
 2f8:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <sensorvalue5>
 2fc:	70 e0       	ldi	r23, 0x00	; 0
 2fe:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <sensorvalue4>
 302:	23 e0       	ldi	r18, 0x03	; 3
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	0e 94 d5 00 	call	0x1aa	; 0x1aa <voter>
 30c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <v2+0x1>
 310:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <v2>
		out = comparator(v1, v2, 130, 134);
 314:	26 e8       	ldi	r18, 0x86	; 134
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	42 e8       	ldi	r20, 0x82	; 130
 31a:	50 e0       	ldi	r21, 0x00	; 0
 31c:	bc 01       	movw	r22, r24
 31e:	ce 01       	movw	r24, r28
 320:	0e 94 3b 01 	call	0x276	; 0x276 <comparator>
 324:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 328:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
		PORTD = out;
 32c:	8b b9       	out	0x0b, r24	; 11
		wait(100);
 32e:	84 e6       	ldi	r24, 0x64	; 100
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	0e 94 b8 00 	call	0x170	; 0x170 <wait>
 336:	c9 cf       	rjmp	.-110    	; 0x2ca <main+0x10>

00000338 <__divmodhi4>:
 338:	97 fb       	bst	r25, 7
 33a:	07 2e       	mov	r0, r23
 33c:	16 f4       	brtc	.+4      	; 0x342 <__divmodhi4+0xa>
 33e:	00 94       	com	r0
 340:	07 d0       	rcall	.+14     	; 0x350 <__divmodhi4_neg1>
 342:	77 fd       	sbrc	r23, 7
 344:	09 d0       	rcall	.+18     	; 0x358 <__divmodhi4_neg2>
 346:	0e 94 b0 01 	call	0x360	; 0x360 <__udivmodhi4>
 34a:	07 fc       	sbrc	r0, 7
 34c:	05 d0       	rcall	.+10     	; 0x358 <__divmodhi4_neg2>
 34e:	3e f4       	brtc	.+14     	; 0x35e <__divmodhi4_exit>

00000350 <__divmodhi4_neg1>:
 350:	90 95       	com	r25
 352:	81 95       	neg	r24
 354:	9f 4f       	sbci	r25, 0xFF	; 255
 356:	08 95       	ret

00000358 <__divmodhi4_neg2>:
 358:	70 95       	com	r23
 35a:	61 95       	neg	r22
 35c:	7f 4f       	sbci	r23, 0xFF	; 255

0000035e <__divmodhi4_exit>:
 35e:	08 95       	ret

00000360 <__udivmodhi4>:
 360:	aa 1b       	sub	r26, r26
 362:	bb 1b       	sub	r27, r27
 364:	51 e1       	ldi	r21, 0x11	; 17
 366:	07 c0       	rjmp	.+14     	; 0x376 <__udivmodhi4_ep>

00000368 <__udivmodhi4_loop>:
 368:	aa 1f       	adc	r26, r26
 36a:	bb 1f       	adc	r27, r27
 36c:	a6 17       	cp	r26, r22
 36e:	b7 07       	cpc	r27, r23
 370:	10 f0       	brcs	.+4      	; 0x376 <__udivmodhi4_ep>
 372:	a6 1b       	sub	r26, r22
 374:	b7 0b       	sbc	r27, r23

00000376 <__udivmodhi4_ep>:
 376:	88 1f       	adc	r24, r24
 378:	99 1f       	adc	r25, r25
 37a:	5a 95       	dec	r21
 37c:	a9 f7       	brne	.-22     	; 0x368 <__udivmodhi4_loop>
 37e:	80 95       	com	r24
 380:	90 95       	com	r25
 382:	bc 01       	movw	r22, r24
 384:	cd 01       	movw	r24, r26
 386:	08 95       	ret

00000388 <_exit>:
 388:	f8 94       	cli

0000038a <__stop_program>:
 38a:	ff cf       	rjmp	.-2      	; 0x38a <__stop_program>
