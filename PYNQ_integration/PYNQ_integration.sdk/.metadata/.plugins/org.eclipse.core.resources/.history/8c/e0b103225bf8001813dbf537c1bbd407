/*
 * ubc.c
 *
 *  Created on: Nov 26, 2018
 *      Author: Mitch
 */

#include "ubc.h"
#include "xparameters.h"
#include "zscore_driver.h"
#include "cusum_driver.h"
#include "derivative_driver.h"
//#include <time.h>
#include <stdlib.h>

#define NUM_ZSCORE 3
#define NUM_CUSUM 3
#define NUM_DERIV 3

#ifndef XPAR_AXI_ZSCORE_0_BASEADDR
#define XPAR_AXI_ZSCORE_0_BASEADDR 0
#define XPAR_AXI_ZSCORE_1_BASEADDR 0
#define XPAR_AXI_ZSCORE_2_BASEADDR 0
#define NUM_ZSCORE 0
#endif
#ifndef XPAR_AXI_ZSCORE_1_BASEADDR
#define XPAR_AXI_ZSCORE_1_BASEADDR 0
#define XPAR_AXI_ZSCORE_2_BASEADDR 0
#define NUM_ZSCORE 1
#endif
#ifndef XPAR_AXI_ZSCORE_2_BASEADDR
#define XPAR_AXI_ZSCORE_2_BASEADDR 0
#define NUM_ZSCORE 2
#endif

#ifndef XPAR_AXI_CUSUM_0_BASEADDR
#define XPAR_AXI_CUSUM_0_BASEADDR 0
#define XPAR_AXI_CUSUM_1_BASEADDR 0
#define XPAR_AXI_CUSUM_2_BASEADDR 0
#define NUM_CUSUM 0
#endif
#ifndef XPAR_AXI_CUSUM_1_BASEADDR
#define XPAR_AXI_CUSUM_1_BASEADDR 0
#define XPAR_AXI_CUSUM_2_BASEADDR 0
#define NUM_CUSUM 1
#endif
#ifndef XPAR_AXI_CUSUM_2_BASEADDR
#define XPAR_AXI_CUSUM_2_BASEADDR 0
#define NUM_CUSUM 2
#endif

#ifndef XPAR_AXI_DERIVATIVE_0_BASEADDR
#define XPAR_AXI_DERIVATIVE_0_BASEADDR 0
#define XPAR_AXI_DERIVATIVE_1_BASEADDR 0
#define XPAR_AXI_DERIVATIVE_2_BASEADDR 0
#define NUM_DERIV 0
#endif
#ifndef XPAR_AXI_DERIVATIVE_1_BASEADDR
#define XPAR_AXI_DERIVATIVE_1_BASEADDR 0
#define XPAR_AXI_DERIVATIVE_2_BASEADDR 0
#define NUM_DERIV 1
#endif
#ifndef XPAR_AXI_DERIVATIVE_2_BASEADDR
#define XPAR_AXI_DERIVATIVE_2_BASEADDR 0
#define NUM_DERIV 2
#endif


Zscore_Control_t zs_ctrls[NUM_ZSCORE];
Cusum_Control_t cs_ctrls[NUM_CUSUM];
Deriv_Control_t dr_ctrls[NUM_DERIV];

u32 * zs_base_addrs[3] = {(u32 *)XPAR_AXI_ZSCORE_0_BASEADDR, (u32 *)XPAR_AXI_ZSCORE_1_BASEADDR, (u32 *)XPAR_AXI_ZSCORE_2_BASEADDR};
u32 * cs_base_addrs[3] = {(u32 *)XPAR_AXI_CUSUM_0_BASEADDR, (u32 *)XPAR_AXI_CUSUM_1_BASEADDR, (u32 *)XPAR_AXI_CUSUM_2_BASEADDR};
u32 * dr_base_addrs[3] = {(u32 *)XPAR_AXI_DERIVATIVE_0_BASEADDR, (u32 *)XPAR_AXI_DERIVATIVE_1_BASEADDR, (u32 *)XPAR_AXI_DERIVATIVE_2_BASEADDR};

u8 inject_deriv = 0;
u8 inject_zscore = 0;
u8 inject_cusum = 0;

double ubc_fault_rate = 0.1;

void ubc_setup(u32 zscore_data_spots, u32 cusum_data_spots, u32 cusum_mean_spots, u32 cusum_expected_mean){
	int i;
	for(i=0;i<NUM_ZSCORE;i++){
		Zscore_setup(&(zs_ctrls[i]), zs_base_addrs[i], zscore_data_spots);
	}
	for(i=0;i<NUM_CUSUM;i++){
		Cusum_setup(&(cs_ctrls[i]), cs_base_addrs[i], cusum_data_spots, cusum_mean_spots, cusum_expected_mean);
	}
	for(i=0;i<NUM_DERIV;i++){
		Deriv_setup(&(dr_ctrls[i]), dr_base_addrs[i]);
	}
	//srand(time(NULL));   // Initialization, should only be called once.
}
void ubc_addData(u32 data){
	int i;
	for(i=0;i<NUM_ZSCORE;i++){
		Zscore_addData(&(zs_ctrls[i]), data);
	}
	for(i=0;i<NUM_CUSUM;i++){
		Cusum_addData(&(cs_ctrls[i]), data);
	}
	for(i=0;i<NUM_DERIV;i++){
		Deriv_addData(&(dr_ctrls[i]), data);
	}
}
u32 ubc_detectAnomaly(u32 zscore_threshold, u32 cusum_threshold, u32 deriv_threshold){
	int i;
	u32 result = 0;
	u32 temp_result;
	for(i=0;i<NUM_ZSCORE;i++){
		temp_result = 0;
		if(zs_ctrls[i].zscore_ready2check == 1){
			temp_result = Zscore_checkAnomaly(&(zs_ctrls[i]), zscore_threshold);
		}
		result = result << 1;
		result |= temp_result;
	}
	for(i=0;i<NUM_CUSUM;i++){
		temp_result = 0;
		if(cs_ctrls[i].cusum_ready2check == 1){
			temp_result = Cusum_checkAnomaly(&(cs_ctrls[i]), cusum_threshold);
		}
		result = result << 1;
		result |= temp_result;
	}
	for(i=0;i<NUM_DERIV;i++){
		temp_result = 0;
		if(dr_ctrls[i].deriv_ready2check == 1){
			temp_result = Deriv_checkAnomaly(&(dr_ctrls[i]), deriv_threshold);
		}
		result = result << 1;
		result |= temp_result;
	}
	return result;
}

void ubc_set_fault_rate(double new_rate){
	ubc_fault_rate = new_rate;
}

void ubc_change_deriv_inj(u8 allow_inj){
	inject_deriv = allow_inj;
}
void ubc_change_zscore_inj(u8 allow_inj){
	inject_zscore = allow_inj;
}
void ubc_change_cusum_inj(u8 allow_inj){
	inject_cusum = allow_inj;
}

void ubc_gen_deriv_fault(u32 * err_pattern, u8 * port){
	int r = rand();
	if(r>ubc_fault_rate*RAND_MAX){
		*err_pattern = 0;
		*port = 0;
		return;
	}
	r = rand();
	*err_pattern = 1 << (r % 32);
	r = rand();
	*port = 1 << (r % 3);
}
void ubc_gen_cusum_fault(u32 * position, u32 * err_pattern, u8 * port){
	u32 max_pos = CUSUM_ERR_INJ_CTRL_ADD_NUM + CUSUM_ERR_INJ_CTRL_SUB_NUM + CUSUM_ERR_INJ_CTRL_MIN_NUM + CUSUM_ERR_INJ_CTRL_MAX_NUM;
	int r = rand();
	if(r>ubc_fault_rate*RAND_MAX){
		*err_pattern = 0;
		*port = 0;
		return;
	}
	r = rand();
	*err_pattern = 1 << (r % 32);
	r = rand();
	*position = r % max_pos;
	r = rand();
	if(*position < CUSUM_ERR_INJ_CTRL_ADD_NUM){
		*port = 1 << (r % 3*CUSUM_ERR_INJ_CTRL_ADD_NUM);
	}else if(*position < CUSUM_ERR_INJ_CTRL_ADD_NUM + CUSUM_ERR_INJ_CTRL_SUB_NUM){
		*port = 1 << (r % 3*CUSUM_ERR_INJ_CTRL_SUB_NUM);
	}else if(*position < CUSUM_ERR_INJ_CTRL_ADD_NUM + CUSUM_ERR_INJ_CTRL_SUB_NUM + CUSUM_ERR_INJ_CTRL_MIN_NUM){
		*port = 1 << (r % 3*CUSUM_ERR_INJ_CTRL_MIN_NUM);
	}else{
		*port = 1 << (r % 3*CUSUM_ERR_INJ_CTRL_MAX_NUM);
	}
}
void ubc_gen_zscore_fault(u32 * position, u32 * err_pattern, u8 * port){
	u32 max_pos = ZSCORE_ERR_INJ_CTRL_ADD1_NUM + ZSCORE_ERR_INJ_CTRL_ADD2_NUM + ZSCORE_ERR_INJ_CTRL_SUB_NUM;
	int r = rand();
	if(r>ubc_fault_rate*RAND_MAX){
		*err_pattern = 0;
		*port = 0;
		return;
	}
	r = rand();
	*err_pattern = 1 << (r % 32);
	r = rand();
	*position = r % max_pos;
	r = rand();
	if(*position < ZSCORE_ERR_INJ_CTRL_ADD1_NUM){
		*port = 1 << (r % 3*ZSCORE_ERR_INJ_CTRL_ADD1_NUM);
	}else if(*position < ZSCORE_ERR_INJ_CTRL_ADD1_NUM + ZSCORE_ERR_INJ_CTRL_ADD2_NUM){
		*port = 1 << (r % 3*ZSCORE_ERR_INJ_CTRL_ADD2_NUM);
	}else{
		*port = 1 << (r % 3*ZSCORE_ERR_INJ_CTRL_SUB_NUM);
	}
}

void ubc_inject_fault(){
	int i;
	u32 err_pattern;
	u32 position;
	u8 port;
	if(inject_zscore == 1){
		ubc_gen_zscore_fault(&position, &err_pattern, &port);
		for(i=0;i<NUM_ZSCORE;i++){
			Zscore_fault_inject(&(zs_ctrls[i]), err_pattern, position, port);
		}
	}
	if(inject_cusum == 1){
		ubc_gen_cusum_fault(&position, &err_pattern, &port);
		for(i=0;i<NUM_CUSUM;i++){
			Cusum_fault_inject(&(cs_ctrls[i]), err_pattern, position, port);
		}
	}
	if(inject_deriv == 1){
		ubc_gen_deriv_fault(&err_pattern, &port);
		for(i=0;i<NUM_DERIV;i++){
			Deriv_fault_inject(&(dr_ctrls[i]), err_pattern, port);
		}
	}
}
void ubc_reset_all_blocks(){
	int i;
	for(i=0;i<NUM_ZSCORE;i++){
		Zscore_reset(&(zs_ctrls[i]));
	}
	for(i=0;i<NUM_CUSUM;i++){
		Cusum_reset(&(cs_ctrls[i]));
	}
	for(i=0;i<NUM_DERIV;i++){
		Deriv_reset(&(dr_ctrls[i]));
	}
}

